name: (reusable) Build project and publish release
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      version-major-minor:
        required: true
        type: string
      is-production-release:
        description: "true to publish a production release, false to publish a nightly release"
        default: false
        type: boolean
    secrets:
      base64-encoded-signingkey:
        required: true
      NUGET_APIKEY:
        required: false
jobs:
  call-build:
    uses: Yvand/EntraCP/.github/workflows/reusable-build.yml@master
    with:
      project-name: ${{ inputs.project-name }}
      version-major-minor: ${{ inputs.version-major-minor }}
      is-production-release: ${{ inputs.is-production-release }}
    secrets:
      base64-encoded-signingkey: ${{ secrets.base64-encoded-signingkey }}

  production-release:
    needs: call-build
    runs-on: ubuntu-latest
    env:
      project-name: ${{ inputs.project-name }}
      assembly-version: ${{ needs.call-build.outputs.assembly-version }}
      tag-name: ${{ needs.call-build.outputs.tag-name }}
      # Secrets cannot be directly referenced in if, so they need to be added to the host environment
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
      secret_nuget_apikey: ${{ secrets.NUGET_APIKEY }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./
          
      - name: Create zip files to publish
        run: |
          echo "assembly-version: ${{ env.assembly-version }}"
          mkdir ${{ env.project-name }}-symbols
          mkdir ${{ env.project-name }}-symbols/debug
          mkdir ${{ env.project-name }}-symbols/release
          echo "Generate symbols zip file"
          cp ./${{ env.project-name }}-Debug-symbols/* ${{ env.project-name }}-symbols/debug
          cp ./${{ env.project-name }}-Release-symbols/* ${{ env.project-name }}-symbols/release
          cd ${{ env.project-name }}-symbols
          zip -r ../${{ env.project-name }}-${{ env.assembly-version }}-symbols.zip ./*
          cd ..
          echo "Generate dependencies zip file"
          mkdir ${{ env.project-name }}-dependencies
          cp ./${{ env.project-name }}-Release-dependencies/* ${{ env.project-name }}-dependencies
          cd ${{ env.project-name }}-dependencies
          zip -r ../${{ env.project-name }}-${{ env.assembly-version }}-dependencies.zip ./*
          cd ..
          echo "Generate unit-tests zip file"
          mkdir ${{ env.project-name }}-unit-tests
          mkdir ${{ env.project-name }}-unit-tests/debug
          mkdir ${{ env.project-name }}-unit-tests/release
          cp ./${{ env.project-name }}-Debug-unit-tests/* ${{ env.project-name }}-unit-tests/debug
          cp ./${{ env.project-name }}-Release-unit-tests/* ${{ env.project-name }}-unit-tests/release
          cd ${{ env.project-name }}-unit-tests
          zip -r ../${{ env.project-name }}-unit-tests.zip ./*
          cd ..
          echo "Generate NuGet zip file if NuGet directory exists"
          if [ -d "NuGet" ]; then
            cd NuGet
            zip -r ../NuGet.zip ./*
            cd ..
          fi
          if [ -d "assembly-bindings.config" ]; then
            echo "Move file assembly-bindings.config to the parent folder"
            mv assembly-bindings.config dir-assembly-bindings-config
            mv dir-assembly-bindings-config/assembly-bindings.config .
          fi
          ls -al
          realpath assembly-bindings.config

      - name: Publish production release
        uses: softprops/action-gh-release@v1
        if: inputs.is-production-release == true
        with:
          name: '${{ env.project-name }} ${{ env.tag-name }}'
          prerelease: true
          draft: true
          tag_name: ${{ env.tag-name }}
          body: |
            ${{ env.project-name }} ${{ env.tag-name }}
          files: |
            ./${{ env.project-name }}-Release-wsp/*.wsp
            ./${{ env.project-name }}-${{ env.assembly-version }}-symbols.zip
            ./${{ env.project-name }}-${{ env.assembly-version }}-dependencies.zip
            ./assembly-bindings.config
            ./NuGet.zip

      - name: Publish nightly release
        uses: andelf/nightly-release@v1
        if: inputs.is-production-release == false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Nightly Release $$'
          prerelease: true
          body: |
            This is a nightly release, use it with caution **and do not deploy it in a production environment**
          files: |
            ./${{ env.project-name }}-Release-wsp/*.wsp
            ./${{ env.project-name }}-${{ env.assembly-version }}-symbols.zip
            ./${{ env.project-name }}-${{ env.assembly-version }}-dependencies.zip
            ./${{ env.project-name }}-unit-tests.zip
            ./assembly-bindings.config
            ./NuGet.zip

      # Install the latest .NET SDK to publish NuGet package, as nuget.exe is not available in Linux
      - name: Setup .NET Core
        if: ${{ env.secret_nuget_apikey != '' && false }}
        uses: actions/setup-dotnet@v3

      # Publish NuGet package to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        if: ${{ env.secret_nuget_apikey != '' && false }}
        shell: bash
        run: |
          nugetfile=$(ls ./NuGet/*.nupkg | head -n 1)
          if [[ -n "$nugetfile" ]]; then
            dotnet nuget push $nugetfile --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          fi
